#!/bin/bash

source ~/.cienv

echo '</pre><h3>Testing</h3><pre>'

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$MODE" = "" ]; then
  echo 'MODE not set'
  exit 2
fi

if [ "$TS" = "" ]; then
  TS="adhoc"
fi

start_cluster() {
  echo "Starting server"
  for a in {1..3}; do
    echo "Starting server: attempt $a"
    stop_cluster
    cd $WORKSPACE/ns_server
    ./cluster_run -n4 1>$WORKSPACE/run.log 2>&1 &
    disown
    for i in {1..120}; do
      grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
          wget -qO- http://localhost:9000/ &>/dev/null &&
            wget -qO- http://localhost:9001/ &>/dev/null &&
              ok_run=1 && break
      sleep 3
    done
    sleep 30
    test "$ok_run" && break
  done
  test "$ok_run" || error_exit "Server startup failed even after 3 tries"
}

stop_cluster() {
  killall -ABRT eventing-consumer 1>/dev/null 2>&1
  killall -ABRT eventing-producer 1>/dev/null 2>&1
  pkill -f cluster_
  pkill -f $WORKSPACE/install/bin
  pkill -f testrunner
  pkill -f $WORKSPACE/install
  pkill -f testrunner
  killall erl beam.smp epmd memcached eventing-producer eventing-consumer python memcached.json 1>/dev/null 2>&1
  sleep 10
  killall -9 erl beam.smp epmd memcached eventing-producer eventing-consumer python memcached.json 1>/dev/null 2>&1
  sleep 10
  pkill erl
  cd $WORKSPACE/ns_server
  make dataclean 1>/dev/null 2>&1
  sudo rm -f /tmp/core*
  sleep 10
}

collect_logs() {
  if [ "$phase" = "" ]; then phase=unknown; fi
  cat $WORKSPACE/test.log >> $WORKSPACE/test-full.log
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar ns_server/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar testrunner/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar test.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar stats.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar run.log 1>/dev/null 2>&1
  find $WORKSPACE/ns_server/logs \
       $WORKSPACE/testrunner/logs \
       $WORKSPACE/test.log \
       $WORKSPACE/stats.log \
       $WORKSPACE/run.log \
    -type f -exec sh -c '> {}' \; 2>/dev/null
}

error_email() {
  if [ ! -f ~/.cigreen ]; then return; fi
  rm ~/.cigreen

  if test "`find ~ -maxdepth 1 -name .cinotify -mmin -1440`"; then return; fi
  touch ~/.cinotify

  if [ "$WATCHERS" = "" -o ! -f ~/.cicred ]; then return; fi
  echo "$1" | \
     sendemail -q \
       -s smtp.gmail.com \
       -o tls=yes \
       -xu cb.ci.bot@gmail.com \
       -xp "`cat ~/.cicred`" \
       -f "$CINAME <cb.ci.bot@gmail.com>" \
       -t $WATCHERS \
       -u "$CINAME broke"
}

error_exit() {
  echo "</pre><h4>Testing Failed: $1</h4><pre>"
  echo "$2"
  collect_logs
  stop_cluster
  for patch_id in `cat ~/gerrit.list`; do
    ssh review.couchbase.org gerrit query change:${patch_id%,*} AND reviewer:self AND status:open | grep -qs 'rowCount: 0' && continue
    ssh review.couchbase.org gerrit review --code-review 0 -m "'MAYBE FAIL $MODE. See https://$CINAME.northscale.in/eventing-$TS.fail.html'" $patch_id
  done
  error_email "Testing Failed: $1\n$2"
  exit 2
}

# Setup workspace
echo "Started testing at `date +'%Y/%m/%d %H:%M:%S'`"
echo "Testing mode: $MODE"
stop_cluster
rm -f $WORKSPACE/logs.tar.* $WORKSPACE/test.log $WORKSPACE/test-full.log $WORKSPACE/stats.log $WORKSPACE/run.log /tmp/core-*
> $WORKSPACE/test.log
> $WORKSPACE/stats.log

# Below tests need a cluster running
start_cluster

export GOTRACEBACK=crash
ulimit -c 2097152
sudo bash -c "echo /tmp/core-%e.$TS.%p > /proc/sys/kernel/core_pattern"
perl -pi -e 's/num_files, 10/num_files, 50/' $WORKSPACE/install/etc/couchbase/static_config
cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/
goverFilename="`grep -A20 'SET(GOVERSION ' CMakeLists.txt  | grep GOVERSION | head -1 | sed -E 's/^.*(SUPPORTED_NEWER|SUPPORTED_OLDER).*$/\1/'`"
gover="`cat $WORKSPACE/golang/versions/${goverFilename}.txt`"
mkdir -p "$WORKSPACE/go"
export GO111MODULE=auto
export GOROOT=$(find $HOME/.cbdepscache/exploded/x86_64 -type d -name 'go-'$gover'*' | sort | tail -1)/go
export GOPATH="$WORKSPACE/go:$WORKSPACE/godeps:$WORKSPACE/goproj"
export PATH="$PATH:$GOROOT/bin"
export LD_LIBRARY_PATH="$WORKSPACE/install/lib"
export C_INCLUDE_PATH="$WORKSPACE/build/platform/include:$WORKSPACE/forestdb/include:$WORKSPACE/build/tlm/deps/curl.exploded/include:$WORKSPACE/sigar/include"
export CGO_LDFLAGS="-L $WORKSPACE/install/lib"

cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/tests/functional_tests
$GOROOT/bin/go get -t ./... 1>/dev/null 2>&1

# Functional tests
export phase=functional
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>${phase^} tests</h4><pre>"
  echo "`date +'%Y/%m/%d %H:%M:%S'` Started $phase"
  cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/tests/functional_tests
  startTime=$SECONDS
  GOMAXPROCS=16 STATSFILE=$WORKSPACE/stats.log $GOROOT/bin/go test -timeout 6h -tags handler -v 2>&1 | tee -a $WORKSPACE/test.log
  duration=$(( SECONDS - startTime ))
  echo "</pre><h2>${phase^} tests took $(($duration / 3600)) hours, $((($duration / 60) % 60)) minutes and $(($duration % 60)) seconds.</h2><pre>"
  collect_logs
fi

stop_cluster

start_cluster

# Query tests
export phase=query
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>${phase^} tests</h4><pre>"
  echo "`date +'%Y/%m/%d %H:%M:%S'` Started $phase"
  cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/tests/functional_tests
  startTime=$SECONDS
  GOMAXPROCS=16 STATSFILE=$WORKSPACE/stats.log $GOROOT/bin/go test -timeout 3h -tags "n1ql analytics" -v 2>&1 | tee -a $WORKSPACE/test.log
  duration=$(( SECONDS - startTime ))
  echo "</pre><h2>${phase^} tests took $(($duration / 3600)) hours, $((($duration / 60) % 60)) minutes and $(($duration % 60)) seconds.</h2><pre>"
  collect_logs
fi

# cURL tests
export phase=curl
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>${phase^} tests</h4><pre>"
  echo "`date +'%Y/%m/%d %H:%M:%S'` Started $phase"
  cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/tests/functional_tests
  startTime=$SECONDS
  GOMAXPROCS=16 STATSFILE=$WORKSPACE/stats.log $GOROOT/bin/go test -timeout 6h -tags curl -v 2>&1 | tee -a $WORKSPACE/test.log
  duration=$(( SECONDS - startTime ))
  echo "</pre><h2>${phase^} tests took $(($duration / 3600)) hours, $((($duration / 60) % 60)) minutes and $(($duration % 60)) seconds.</h2><pre>"
  collect_logs
fi

stop_cluster

start_cluster

# Rebalance tests
export phase=rebalance
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>${phase^} tests</h4><pre>"
  echo "`date +'%Y/%m/%d %H:%M:%S'` Started $phase"
  cd $WORKSPACE/goproj/src/github.com/couchbase/eventing/tests/functional_tests
  startTime=$SECONDS
  GOMAXPROCS=16 STATSFILE=$WORKSPACE/stats.log $GOROOT/bin/go test -timeout 4h -tags "eventing_reb testrunner_reb kv_reb duplicate_events" -v 2>&1 | tee -a $WORKSPACE/test.log
  duration=$(( SECONDS - startTime ))
  echo "</pre><h2>${phase^} tests took $(($duration / 3600)) hours, $((($duration / 60) % 60)) minutes and $(($duration % 60)) seconds.</h2><pre>"
  collect_logs
fi

# Below tests start their own cluster, so stop ours
stop_cluster

# Integration tests
export phase=integration
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>${phase^} tests</h4><pre>"
  echo "`date +'%Y/%m/%d %H:%M:%S'` Started $phase"
  cd $WORKSPACE/testrunner
  (timeout 2h make test-eventing-sanity-tests 2>&1 | ts) | tee -a $WORKSPACE/test.log
  collect_logs
fi

# Check to make sure N1QL grammer did not change recently
# TODO: automate this check instead of skipping it
# cd $WORKSPACE/goproj/src/github.com/couchbase/query/parser/n1ql
# git ls-files -s n1ql.nex n1ql.y > ~/n1ql_parser.maybe
# test -f ~/n1ql_parser.good || cp ~/n1ql_parser.maybe ~/n1ql_parser.good
# msg="FAIL(manual): N1QL grammer appears to have changed recently. Review and if OK, run: cp ~/n1ql_parser.maybe ~/n1ql_parser.good"
# diff -q ~/n1ql_parser.good ~/n1ql_parser.maybe || echo "$msg" >> $WORKSPACE/test-full.log

# Verify results
> /tmp/fail.log
cd $WORKSPACE/goproj/src/github.com/couchbase/eventing
grep 'make:\s\*\*\*\s\[eventing-integration-tests\]\s' $WORKSPACE/test-full.log >> /tmp/fail.log
grep '\sfail\s*$' $WORKSPACE/test-full.log >> /tmp/fail.log
grep 'FAIL\s*github.com/couchbase' $WORKSPACE/test-full.log >> /tmp/fail.log
grep -- '--- FAIL:' $WORKSPACE/test-full.log >> /tmp/fail.log
grep '^\s*2i' $WORKSPACE/test-full.log | grep 'fail\s*$' >> /tmp/fail.log
grep -A1 'FAILED (errors=' $WORKSPACE/test-full.log >> /tmp/fail.log
grep 'FAIL(manual)' $WORKSPACE/test-full.log >> /tmp/fail.log
egrep 'pass [0-9]+.*fail [1-9]+' $WORKSPACE/test-full.log >> /tmp/fail.log
faillog="`cat /tmp/fail.log`"
if [ "$faillog" != "" ]; then error_exit "Required test failed" "$faillog"; fi
echo "</pre><h4>Testing Succeeded</h4><pre>"
echo

cd ~
for file in *.maybe; do
    mv "$file" "$(basename "$file" .maybe).good"
done

for patch_id in `cat ~/gerrit.list`; do
  ssh review.couchbase.org gerrit query change:${patch_id%,*} AND reviewer:self AND status:open | grep -qs 'rowCount: 0' && continue
  ssh review.couchbase.org gerrit review --code-review 1 -m "'PASS $MODE. See https://$CINAME.northscale.in/eventing-$TS.pass.html'" $patch_id
done

touch ~/.cigreen
exit 0
